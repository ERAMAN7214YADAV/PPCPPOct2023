/*

Given a string of length n, generate all of its subsequences.

A subsequence of a given string (sequence) is a string (sequence) that is generated by
removing zero or more characters from the given string (sequence) without changing its
order.

Example

	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]

Constraints

  1 < n < 10

*/

#include<iostream>
#include<set>

using namespace std;

set<string> s;

void f(char inp[], char out[], int i, int j) {

	// base case
	if (inp[i] == '\0') {
		out[j] = '\0';
		// cout << out << endl;

		// string str(out);
		// s.insert(str);

		s.insert(string(out));

		return;
	}

	// recursive case

	// generate subseq for inp[i...n-1] or

	// take a sequence of n-i decisions for the characters i to n-1

	// take a decision for the character at the ith index i.e. inp[i]

	// option 1 : include inp[i] in the out[]

	out[j] = inp[i];
	f(inp, out, i + 1, j + 1);

	// option 2 : exclude inp[i] from the out[]
	f(inp, out, i + 1, j);

}

int main() {

	char inp[] = "abc";
	char out[10];

	f(inp, out, 0, 0);

	for (string subseq : s) {
		cout << subseq << endl;
	}

	return 0;
}
